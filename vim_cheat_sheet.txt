************************************************************************
* Cursor movement                                                      *
************************************************************************
	h - move left
	j - move down
	k - move up
	l - move right
	ctrl-b - page up
	ctrl-f - page down
	% - jump to matching brace
	w - jump by start of words (punctuation considered words)
	W - jump by words (spaces separate words)
	e - jump to end of words (punctuation considered words)
	E - jump to end of words (no punctuation)
	b - jump backward by words (punctuation considered words)
	B - jump backward by words (no punctuation)
	0 - (zero) start of line
	^ - first non-blank character of line
	$ - end of line
	gg - Go to first line
	[N]G - Go To line N. No N: last line
	Note: Prefix a cursor movement command with a number to repeat it. For example,
	4j moves down 4 lines.



************************************************************************
* Code Navigation                                                      *
************************************************************************
	[{ - jump back to the "{" at the start of the current code block
	gd - jump from the use of a variable to its local declaration
	m - mark the line (bookmark)
	ma mark the line as 'a' bookmark
	* # g* g#           : find word under cursor (<cword>) (forwards/backwards)
	[I - show lines matching word under cursor <cword> (super)



************************************************************************
* Code Navigation With Grep                                            *
************************************************************************
	:vimgrep /pattern/gj ./**/*.ext
	:cw ou :copen



************************************************************************
* Code Navigation With CTAGS                                           *
************************************************************************
	<c-]> Navigating to the function definition
	<c-t> Returning back to function call
	:ta /^get Navigating through a list of function names
	:ts – shows the list.
	:tn – goes to the next tag in that list.
	:tp - goes to the previous tag in that list.
	:tf – goes to the function which is in the first of the list.
	:tl – goes to the function which is in the last of the list.




************************************************************************
* Indenting and formating                                              *
************************************************************************
	>> - indent line one column to right
	<< - indet line one column to left
	== - auto-indent current line
	>i{
	>a{
	>%
	<%

	# Re-Formatting text
	gq}                          : Format a paragraph
	ggVGgq                       : Reformat entire file
	Vgq                          : current line



************************************************************************
* Directories Navigation                                               *
************************************************************************
	:cd .. - move to parent directory
	:lcd %:p:h - change to directory of current file



************************************************************************
* Correct line ending                                                  *
************************************************************************
	On Linux and Mac OS, the following works
	:%s/^V^M/^V^M/g
	(where ^V means control-V and ^M means control-M)



************************************************************************
* History                                                              *
************************************************************************
	'.               : jump to last modification line (SUPER)
	`.               : jump to exact spot in last modification line
	g;               : cycle thru recent changes (oldest first) (new in vim6.3)
	g,               : reverse direction (new in vim6.3)
	:changes
	:h changelist    : help for above
	<C-O>            : retrace your movements in file (starting from most recent)
	<C-I>            : retrace your movements in file (reverse direction)
	:ju(mps)         : list of your movements
	:help jump-motions
	:history         : list of all your commands
	:his c           : commandline history
	:his s           : search history
	q/               : Search history Window
	q:               : commandline history Window
	:<C-F>           : history Window



************************************************************************
* Macro                                                                *
************************************************************************
	qa - start recording into register 'a'
	q - stop recording
	@a - repeat macro in register 'a'



************************************************************************
* Copy buffers                                                         *
************************************************************************
	"ay - yank in the 'a' register
	"ap - paste from the 'a' register
	:let @a=@b - copy the contents of the b register to a
	:let @a=@" - copy the contents of the " register to a
	:ls - list of buffers
	:reg             : display contents of all registers
	:reg a           : display content of individual registers
	"1p....          : retrieve numeric registers one by one

	# appending to registers (use CAPITAL)
	# yank 5 lines into "a" then add a further 5
	"a5yy
	10j
	"A5yy

	"+y - copy to system clipboard
	"+p - past from system clipboard



************************************************************************
* Changing Case                                                        *
************************************************************************
	guu                             : lowercase line
	gUU                             : uppercase line
	Vu                              : lowercase line
	VU                              : uppercase line
	g~~                             : flip case line
	vEU                             : Upper Case Word
	vE~                             : Flip Case Word
	ggguG                           : lowercase entire file



************************************************************************
* Columns Selection                                                    *
************************************************************************
	# how to copy a set of columns using VISUAL BLOCK
	# visual block (AKA columnwise selection) (NOT BY ordinary v command)
	<C-V> then select "column(s)" with motion commands (win32 <C-Q>)


************************************************************************
* Number increment                                                     *
************************************************************************
	<C-A> - increment number under cursor
	<C-X> - decrement number under cursor



************************************************************************
* Insert Mode - Inserting/Appending text                               *
************************************************************************
	i - start insert mode at cursor
	I - insert at the beginning of the line
	a - append after the cursor
	A - append at the end of the line
	o - open (append) blank line below current line (no need to press return)
	O - open blank line above current line
	ea - append at end of word
	Esc - exit insert mode



************************************************************************
* Insert Mode - Code Completion                                        *
************************************************************************
	ctrl-N - expand the word using the current document
	<C-N><C-P> - word completion in insert mode
	<C-X><C-L> - Line complete SUPER USEFUL



************************************************************************
* Editing                                                              *
************************************************************************
	r - replace a single character (does not use insert mode)
	J - join line below to the current one
	cc - change (replace) an entire line
	cw - change (replace) to the end of word
	c$ - change (replace) to the end of line
	s - delete character at cursor and subsitute text
	S - delete line at cursor and substitute text (same as cc)
	xp - transpose two letters (delete and paste, technically)
	u - undo
	ctrl-r - redo
	. - repeat last command
	~ - switch case
	g~iw - switch case of current word
	gUiw - make current word uppercase
	guiw - make current word lowercase
	ddp - swap current line with next
	ddkP - swap current line with previous



************************************************************************
* Cut and Paste                                                        *
************************************************************************
	dd - delete (cut) a line
	dw - delete the current word
	x - delete current character
	X - delete previous character
	D - delete from cursor to end of line
	yy - yank (copy) a line
	2yy - yank 2 lines
	yw - yank word
	y$ - yank to end of line
	p - put (paste) the clipboard after cursor/current line
	P - put (paste) before cursor/current line
	:set paste - avoid unexpected effects in pasting



************************************************************************
* Visual Mode - Marking text                                           *
************************************************************************
	v - start visual mode, mark lines, then do command (such as y-yank)
	V - start Linewise visual mode
	o - move to other end of marked area
	U - upper case of marked area
	ctrl+v - start visual block mode
	O - move to Other corner of block
	aw - mark a word
	ab - a () block (with braces)
	aB - a {} block (with brackets)
	ib - inner () block
	iB - inner {} block
	Esc - exit visual mode



************************************************************************
* Visual Mode - Commands                                               *
************************************************************************
	> - shift right
	< - shift left
	c - change (replace) marked text
	y - yank (copy) marked text
	d - delete marked text
	~ - switch case



************************************************************************
* Visual Mode - Cut and paste                                          *
************************************************************************
	1. Place the cursor at the start of your text.
	2. ma (marks the location as point 'a')
	3. Place the cursor at the end of your text.
	4. d'a (cuts back to location 'a')



************************************************************************
* Visual Mode - Select columns                                         *
************************************************************************
	<C-v>



************************************************************************
* Exiting                                                              *
************************************************************************
	:w - write (save) the file, but don't exit
	:wq - write (save) and quit
	:x - same as :wq
	:q - quit (fails if anything has changed)
	:q! - quit and throw away changes



************************************************************************
* Search                                                               *
************************************************************************
	/pattern - search for pattern
	?pattern - search backward for pattern
	n - repeat search in same direction
	N - repeat search in opposite direction

	/<C-R><C-W>         : Pull <cword> onto search/command line
	/<C-R><C-A>         : Pull <CWORD> onto search/command line

	Combo :
		* - find the next occurrence of the word
		cw - change the word
		n - find the next word
		. - repeat the cw command

	/joe/e                      : cursor set to End of match
	/joe/e+1                    : cursor set to End of match plus 1
	/joe/s-2                    : cursor set to Start of match minus 2
	/^joe.*fred.*bill/          : normal
	/^[A-J]\+/                  : search for lines beginning with one or more A-J
	/begin\_.*end               : search over possible multiple lines
	/fred\_s*joe/i              : any whitespace including newline
	/fred\|joe                  : Search for FRED OR JOE
	/\([^0-9]\|^\)%.*%          : Search for absence of a digit or beginning of line
	/.*fred\&.*joe              : Search for FRED AND JOE in any ORDER!
	/\<fred\>/i                 : search for fred but not alfred or frederick
	/\<\d\d\d\d\>               : Search for exactly 4 digit numbers
	/\D\d\d\d\d\D               : Search for exactly 4 digit numbers
	/\<\d\{4}\>                 : same thing
	# finding empty lines
	/^\n\{3}                    : find 3 empty lines
	# Specify what you are NOT searching for (vowels)
	/\c\v([^aeiou]&\a){4}       : search for 4 consecutive consanants
	# using rexexp memory in a search
	/\(fred\).*\(joe\).*\2.*\1
	# Repeating the Regexp (rather than what the Regexp finds)
	/^\([^,]*,\)\{8}

	searching over multiple lines \_ means including newline
		/<!--\_p\{-}-->                   : search for multiple line comments
		/fred\_s*joe/i                    : any whitespace including newline
		/bugs\(\_.\)*bunny                : bugs followed by bunny anywhere in file



************************************************************************
* Replace                                                              *
************************************************************************
	:%s/old/new/g - replace all old with new throughout file
	:%s/old/new/gc - replace all old with new throughout file with confirmations
	:%s/fred/joe/igc            : general substitute command
	:%s/\r//g                   : Delete DOS returns ^M

	Is your Text File jumbled onto one line? use following
		:%s/\r/\r/g                 : Turn DOS returns ^M into real returns
		:%s=  *$==                  : delete end of line blanks
		:%s= \+$==                  : Same thing
		:%s#\s*\r\?$##              : Clean both trailing spaces AND DOS returns
		:%s#\s*\r*$##               : same thing

	deleting empty lines
		:%s/^\n\{3}//               : delete blocks of 3 empty lines
		:%s/^\n\+/\r/               : compressing empty lines

	substitute using a register
		:s/fred/<c-r>a/g            : sub "fred" with contents of register "a"
		:s/fred/\=@a/g              : better alternative as register not displayed



************************************************************************
* Global command display                                               *
************************************************************************
	:g/fred.*joe.*dick/         : display all lines fred,joe & dick
	:g/\<fred\>/                : display all lines fred but not freddy
	:g/<pattern>/z#.5           : display with context
	:g/<pattern>/z#.5|echo "=========="  : display beautifully
	:g/^\s*$/d                  : delete all blank lines
	:g!/^dd/d                   : delete lines not containing string
	:v/^dd/d                    : delete lines not containing string
	:g/fred/,/joe/d             : not line based (very powerfull)
	:g/{/ ,/}/- s/\n\+/\r/g     : Delete empty lines but only between {...}
	:v/./.,/./-1join            : compress empty lines
	:g/^$/,/./-j                : compress empty lines
	:g/<input\|<form/p          : ORing
	:g/^/pu _                   : double space file (pu = put)
	:g/^/m0                     : Reverse file (m = move)
	:g/fred/t$                  : copy lines matching fred to EOF
	:g/stage/t'a                : copy lines matching stage to marker a
	:g/fred/y A                 : append all lines fred to register a



************************************************************************
* Working with multiple files                                          *
************************************************************************
	:e filename - Edit a file in a new buffer
	:n **/*.pl - Open all perl files under the current directory, recursively
	:tabe filename - Edit a file in a new tab (Vim7, gVim)
	:bnext (or :bn) - go to next buffer
	:bprev (or :bp) - go to previous buffer
	:bd - delete a buffer (close a file)
	:sp filename - Open a file in a new buffer and split window
	ctrl-w s - Split windows
	ctrl-w w - switch between windows
	ctrl-w q - Quit a window
	ctrl-w v - Split windows vertically



************************************************************************
* Tabs (Vim7)                                                          *
************************************************************************
	gt - Next tab
	gT - Previous tab
	:tabr - First tab
	:tabl - Last tab
	:tabm [N] - Move current tab after tab N. No N: last. N=0: first.
	$vim -p file1 file2 fileN  - Open multiple files in different tabs (vim7)



************************************************************************
* Command Line Options                                                 *
************************************************************************
	$vim -c "vim command" file - execute an editor command on startup



************************************************************************
* Commands                                                             *
************************************************************************
	:setlocal fileformat=dos|unix
	:setlocal fileencoding=utf-8



************************************************************************
* Multiple files                                                       *
************************************************************************
	:bn              : goto next buffer
	:bp              : goto previous buffer
	:wn              : save file and move to next (super)
	:wp              : save file and move to previous
	:bd              : remove file from buffer list (super)
	:bun             : Buffer unload (remove window but not from list)
	:b 3             : go to buffer 3
	:b main          : go to buffer with main in name eg main.c (ultra)
	:sav php.html    : Save current file as php.html and "move" to php.html
	:sav! %<.bak     : Save Current file to alternative extension
	:sav! %:r.cfm    : Save Current file to alternative extension
	:e!              : return to unmodified file
	:w c:/aaa/%      : save file elsewhere
	:e #             : edit alternative file
	:rew             : return to beginning of editted files list (:args)
	:brew            : buffer rewind
	:sp fred.txt     : open fred.txt into a split
	:sball,:sb       : Split all buffers (super)
	:set hidden      : Allows to change buffer w/o saving current buffer



************************************************************************
* More help                                                            *
************************************************************************
	:help - main help portal (with links to more help pages)
	:viusage - show a huge cheat sheet listing every command


************************************************************************
* Folding commands                                                     *
************************************************************************
	zf}                               : fold paragraph using motion
	v}zf                              : fold paragraph using visual
	zf'a                              : fold to mark
	zo                                : open fold
	zc                                : re-close fold

	zf#j creates a fold from the cursor down # lines.
	zf/string creates a fold from the cursor to string .
	zj moves the cursor to the next fold.
	zk moves the cursor to the previous fold.
	zo opens a fold at the cursor.
	zO opens all folds at the cursor.
	zm increases the foldlevel by one.
	zM closes all open folds.
	zr decreases the foldlevel by one.
	zR decreases the foldlevel to zero -- all folds will be open.
	zd deletes the fold at the cursor.
	zE deletes all folds.
	[z move to start of open fold.
	]z move to end of open fold.

	Position the cursor on the first brace, and type zfa} (also [], <>)
	Or backward.


************************************************************************
* Shortcuts                                                            *
************************************************************************
	<leader><F5> - CheckSyntax

	" Switch to current dir
	<leader>d - switch to current file dir
	cd. - switch to current file dir in command line

	<leader>a - Switch to alternate window (mnemonic: ,alternate)

	<F12> to paste in text from other apps

	"navigation between tabs
	th tab first
	tj tab next
	tk tab prev
	tl tab last
	tw tab close
	te tab edit

	" Smart way to move btw. windows
	<C-j> <C-W>j
	<C-k> <C-W>k
	<C-h> <C-W>h
	<C-l> <C-W>l

	" add a new line without entering in insert mode
	<A-o> o<Esc>k "insert a line after and return on current line
	<A-O> O<Esc>j "insert a line before and return on current line


	"Plugin: NERDTree - keys to toggle NERDTree
	<C-e> NERDTreeClose et NERDTree + path
	<leader>e - NERDTreeToggle et NERDTreeMirror
	<leader>nt - NERDTreeFind

	""" Code folding options
	<leader>f0 foldlevel=0
	<leader>f1 foldlevel=1
	<leader>f2 foldlevel=2
	<leader>f3 foldlevel=3
	<leader>f4 foldlevel=4
	<leader>f5 foldlevel=5
	<leader>f6 foldlevel=6
	<leader>f7 foldlevel=7
	<leader>f8 foldlevel=8
	<leader>f9 foldlevel=9

	"force tabs and retab all
	<leader>rt - transform spaced tabs into real tabs

	<leader>sl - ViewSession
	<leader>ss - SaveSession

	<leader>pd PhpDocSingle
	<leader>pd PhpDocRange

	<A-F11> - TaglistToggle

	" Fast editing of the .vimrc (with autocmd to reload conf on saving)
	<leader>vrc - open vimrc for editing

	<C-F11> - TagbarToggle
	<A-F11> - TlistToggle
	<A-F12> - Flisttoggle

	<space> - ToggleFold()

************************************************************************
* Plugins                                                              *
************************************************************************
	" autoclosetag (http://www.vim.org/scripts/script.php?script_id=2591)

	" checksyntax (https://github.com/tomtom/checksyntax_vim)


	" command-t (https://github.com/wincent/Command-T)
		https://github.com/wincent/Command-T/blob/master/doc/command-t.txt

		" shortcuts and commands
		<Leader>t - bring up the Command-T file window
		<Leader>b - bring up the Command-T buffer window
		:CommandT
		:CommandT ../path/to/other/files
		:CommandTBuffer
		:CommandTFlush - flush the path cache

		" Force mapping for CommandT
		nmap <silent> <Leader>t :CommandT<CR>
		nmap <silent> <Leader>b :CommandTBuffer<CR>

		" The following mappings are active when the prompt has focus:
			<BS> delete the character to the left of the cursor
			<Del> delete the character at the cursor
			<Left> move the cursor one character to the left
			<C-h> move the cursor one character to the left
			<Right> move the cursor one character to the right
			<C-l> move the cursor one character to the right
			<C-a> move the cursor to the start (left)
			<C-e> move the cursor to the end (right)
			<C-u> clear the contents of the prompt
			<Tab> change focus to the file listing
		" The following mappings are active when the file listing has focus:
			<Tab> change focus to the prompt
		" The following mappings are active when either the prompt or the file listing
has focus:
			<CR> open the selected file
			<C-CR> open the selected file in a new split window
			<C-s> open the selected file in a new split window
			<C-v> open the selected file in a new vertical split window
			<C-t> open the selected file in a new tab
			<C-j> select next file in the file listing
			<C-n> select next file in the file listing
			<Down> select next file in the file listing
			<C-k> select previous file in the file listing
			<C-p> select previous file in the file listing
			<Up> select previous file in the file listing
			<C-c> cancel (dismisses file listing)
		" The following is also available on terminals which support it:
			<Esc> cancel (dismisses file listing)

	" delimitMate (https://github.com/Raimondi/delimitMate)
		https://github.com/Raimondi/delimitMate/blob/master/doc/delimitMate.txt

		:DelimitMateTest
		" let delimitMate_expand_cr = 1
		" let delimitMate_expand_space = 1
		" let delimitMate_nesting_quotes = ['"','`']

	" easytag (https://github.com/vim-scripts/easytags.vim)
		https://github.com/vim-scripts/easytags.vim/blob/master/doc/easytags.txt

	" nerdcommenter (https://github.com/scrooloose/nerdcommenter)
		https://github.com/scrooloose/nerdcommenter/blob/master/doc/NERD_commenter.txt

		<Leader>cc - Comment out the current line or text selected in visual mode.
		<Leader>cn - Same as <Leader>cc but forces nesting.
		<Leader>c<space> - Toggles the comment state of the selected line(s). If the topmost selected
		line is commented, all selected lines are uncommented and vice versa.
		<Leader>cm - Comments the given lines using only one set of multipart delimiters.
		<Leader>ci - Toggles the comment state of the selected line(s) individually.
		<Leader>cs - Comments out the selected lines ``sexily''
		<Leader>cy - Same as <Leader>cc except that the commented line(s) are yanked first.
		<Leader>c$ - Comments the current line from the cursor to the end of line.
		<Leader>cA - Adds comment delimiters to the end of line and goes into insert mode between
		them.
		<Leader>ca - Switches to the alternative set of delimiters.
		<Leader>cl
		<Leader>cb - Same as |NERDComComment| except that the delimiters are aligned down the
		left side (<Leader>cl) or both sides (<Leader>cb).
		<Leader>cu - Uncomments the selected line(s).

	" nerdtree (https://github.com/scrooloose/nerdtree)
		https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt

		:NERDTree [<start-directory> | <bookmark>]
		:NERDTreeToggle [<start-directory> | <bookmark>]
		:NERDTreeMirror
		:NERDTreeClose
		:NERDTreeFind

		:Bookmark <name>
			Bookmark the current node as <name>. If there is already a <name>
			bookmark, it is overwritten. <name> must not contain spaces.
		:BookmarkToRoot <bookmark>
			Make the directory corresponding to <bookmark> the new root. If a treenode
			corresponding to <bookmark> is already cached somewhere in the tree then
			the current tree will be used, otherwise a fresh tree will be opened.
			Note that if <bookmark> points to a file then its parent will be used
			instead.
		:RevealBookmark <bookmark>
			If the node is cached under the current root then it will be revealed
			(i.e. directory nodes above it will be opened) and the cursor will be
			placed on it.
		:OpenBookmark <bookmark>
			<bookmark> must point to a file. The file is opened as though |NERDTree-o|
			was applied. If the node is cached under the current root then it will be
			revealed and the cursor will be placed on it.
		:ClearBookmarks [<bookmarks>]
			Remove all the given bookmarks. If no bookmarks are given then remove all
			bookmarks on the current node.
		:ClearAllBookmarks
			Remove all bookmarks.
		:ReadBookmarks
			Re-read the bookmarks in the |'NERDTreeBookmarksFile'|.


		o.......Open files, directories and bookmarks....................|NERDTree-o|
		go......Open selected file, but leave cursor in the NERDTree.....|NERDTree-go|
		t.......Open selected node/bookmark in a new tab.................|NERDTree-t|
		T.......Same as 't' but keep the focus on the current tab........|NERDTree-T|
		i.......Open selected file in a split window.....................|NERDTree-i|
		gi......Same as i, but leave the cursor on the NERDTree..........|NERDTree-gi|
		s.......Open selected file in a new vsplit.......................|NERDTree-s|
		gs......Same as s, but leave the cursor on the NERDTree..........|NERDTree-gs|
		O.......Recursively open the selected directory..................|NERDTree-O|
		x.......Close the current nodes parent...........................|NERDTree-x|
		X.......Recursively close all children of the current node.......|NERDTree-X|
		e.......Edit the current dif.....................................|NERDTree-e|

		<CR>...............same as |NERDTree-o|.
		double-click.......same as the |NERDTree-o| map.
		middle-click.......same as |NERDTree-i| for files, same as |NERDTree-e| for dirs.

		D.......Delete the current bookmark .............................|NERDTree-D|

		P.......Jump to the root node....................................|NERDTree-P|
		p.......Jump to current nodes parent.............................|NERDTree-p|
		K.......Jump up inside directories at the current tree depth.....|NERDTree-K|
		J.......Jump down inside directories at the current tree depth...|NERDTree-J|
		<C-J>...Jump down to the next sibling of the current directory...|NERDTree-C-J|
		<C-K>...Jump up to the previous sibling of the current directory.|NERDTree-C-K|

		C.......Change the tree root to the selected dir.................|NERDTree-C|
		u.......Move the tree root up one directory......................|NERDTree-u|
		U.......Same as 'u' except the old root node is left open........|NERDTree-U|
		r.......Recursively refresh the current directory................|NERDTree-r|
		R.......Recursively refresh the current root.....................|NERDTree-R|
		m.......Display the NERD tree menu...............................|NERDTree-m|
		cd......Change the CWD to the dir of the selected node...........|NERDTree-cd|

		I.......Toggle whether hidden files displayed....................|NERDTree-I|
		f.......Toggle whether the file filters are used.................|NERDTree-f|
		F.......Toggle whether files are displayed.......................|NERDTree-F|
		B.......Toggle whether the bookmark table is displayed...........|NERDTree-B|

		q.......Close the NERDTree window................................|NERDTree-q|
		A.......Zoom (maximize/minimize) the NERDTree window.............|NERDTree-A|
		?.......Toggle the display of the quick help.....................|NERDTree-?|

	" snipmate (https://github.com/garbas/vim-snipmate)
		https://github.com/garbas/vim-snipmate/blob/master/doc/snipMate.txt

		:SnipMateOpenSnippetFiles
		<c-r><tab>: shows a list of available snippets
		XX<tab> : will either show a list of all snippets starting with the characters XX or expand the snippet if it matches a snippet name.

	" tabular (https://github.com/godlygeek/tabular)
		https://github.com/godlygeek/tabular/blob/master/doc/Tabular.txt

		:Tabularize /,/r1c1l0
		That command would be read as "Align the matching text, splitting fields on commas. Print everything before the first comma right aligned, then 1 space, then the comma center aligned, then 1 space, then everything after the comma left aligned."

	" align (https://github.com/tsaleh/vim-align)
		https://github.com/tsaleh/vim-align/blob/master/doc/Align.txt

		:AlignCtrl lp0P0 (p0 means zero space before the separator, and P0 means zero space after it)
		:AlignCtrl r
		:AlignCtrl lr
		:1,4Align =

		AlignCtrl w= :=  ignore all selected lines' initial white space
		AlignCtrl W= :=  retain all selected lines' initial white space
		AlignCtrl I= :=  retain only the first line's initial white space and re-use it for subsequent lines

		AlignCtrl -l    - : skip treating the separator as a separator. *alignctrl--*
		AlignCtrl rl+   + : repeat use of the last "lrc" justification *alignctrl-+*
		AlignCtrl rl+   : : treat the rest of the line as a single field *alignctrl-:*

	" fugitive (https://github.com/tpope/vim-fugitive)
		https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt

	" matchit (https://github.com/tsaleh/vim-matchit)
		https://github.com/tsaleh/vim-matchit/blob/master/doc/matchit.txt

		% Cycle forward
		g% Cycle backwards
		[% Go to [count] next unmatched group
		]% Go to [count] next unmatched group
		a% In Visual mode, select the matching group, as specified by |b:match_words|, containing the cursor

	" session (https://github.com/xolox/vim-session)
		https://github.com/xolox/vim-session/blob/master/doc/session.txt

		:SaveSession
		:OpenSession
		:RestartVim
		:CloseSession
		:DeleteSession
		:ViewSession

	" surround (https://github.com/tpope/vim-surround)
		https://github.com/tpope/vim-surround/blob/master/doc/surround.txt

		Old text				Command			New text ~
		"Hello *world!" 		ds"				Hello world!
		<div>Yo!*</div>			dst				Yo!
		[123+4*56]/2 			cs]) 			(123+456)/2
		(123+4*56)/2 			cs)]			[123+456]/2
		(123+4*56)/2 			cs)[ 			[ 123+456 ]/2
		"Look ma, I'm *HTML!"	cs"<q> 			<q>Look ma, I'm HTML!</q>
		if *x>3 { 				ysW( 			if ( x>3 ) {
		Hello w*orld!			ysiw)			Hello (world)!
		my $str = *whee!; 		vlllls' 		my $str = 'whee!';
		Hello w*orld!			yssB			{Hello world!}

		As a special case, *yss* operates on the current line, ignoring leading whitespace.
		There is also *yS* and *ySS* which indent the surrounded text and place it on a line of its own.

	" taglist (https://github.com/pix/vim-taglist)
		https://github.com/pix/vim-taglist/blob/master/doc/taglist.txt

		:TlistToggle
		:TlistUpdate
		:TlistAddFilesRecursive /my/project/dir *.c

	" function list
		http://www.vim.org/scripts/script.php?script_id=3681

		:Flisttoggle

	" Tagbar (https://github.com/majutsushi/tagbar)
		https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt

		:TagbarOpen
			Open the Tagbar if it is closed. In case it is already open jump to it.

		:TagbarClose
			Close the Tagbar window if it is open.

		:TagbarToggle
			Open the Tagbar window if it is closed or close it if it is open.

		:TagbarOpenAutoClose
			Open the Tagbar window and close it on tag selection, regardless of the
			setting of |g:tagbar_autoclose|. If it was already open jump to it.

		:TagbarSetFoldlevel [number]
			Set the foldlevel of the tags of the current file to [number]. The
			foldlevel of tags in other files remains unaffected. Works in the same way
			as 'foldlevel'.

		:TagbarShowTag
			Open the parent folds of the current tag in the file window as much as
			needed for the tag to be visible in the Tagbar window.

	" zen coding (https://github.com/mattn/zencoding-vim)
		http://code.google.com/p/zen-coding/w/list

		insert mode <C-Y> - expend abbreviation
		visual mode v_<C-Y> - wrap with abbreviation
		To jump next point that need to edit, type |<C-Y>n| in insert mode
		To jump previous point that need to edit, type |<C-Y>N| in insert mode
		To remove tag in the block, type |<C-Y>k|
		To join multi line text like following, type |J|
		Comment block Type '<c-y>/' in insert mode
		To Split/Join Tag (toggle autoclosing tag </> or <></>), type |<C-Y>j|
		Type |<C-Y>a| to make link from url

	" ack.vim (https://github.com/mileszs/ack.vim)
		https://github.com/mileszs/ack.vim/blob/master/doc/ack.txt

		:Ack [options] {pattern} [{directory}]
		--type=TYPE, --type=noTYPE

	" MRU Most Recent Used files (https://github.com/vim-scripts/mru.vim)
		:MRU
